// Code generated by goagen v1.5.13, DO NOT EDIT.
//
// API "test_build": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/kod-source/docker-goa-mysql/design
// --out=/Users/horikoudai/program-practice/docker-goa/app
// --version=v1.5.13

package app

import (
	"context"
	goa "github.com/shogo82148/goa-v1"
	"net/http"
	"strconv"
)

// AddTestContext provides the test add action context.
type AddTestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Left  int
	Right int
}

// NewAddTestContext parses the incoming request URL and body, performs validations and creates the
// context used by the test controller add action.
func NewAddTestContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddTestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddTestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLeft := req.Params["left"]
	if len(paramLeft) > 0 {
		rawLeft := paramLeft[0]
		if left, err2 := strconv.Atoi(rawLeft); err2 == nil {
			rctx.Left = left
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("left", rawLeft, "integer"))
		}
	}
	paramRight := req.Params["right"]
	if len(paramRight) > 0 {
		rawRight := paramRight[0]
		if right, err2 := strconv.Atoi(rawRight); err2 == nil {
			rctx.Right = right
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("right", rawRight, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddTestContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AddTestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
